// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id           Int     @id @default(autoincrement())
  userName     String
  userEmail    String  @unique
  userPassword String
  userRole     Role    @default(USER)
  carts        Cart[]
  orders       Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "users")
}

model Product {
  id           Int        @id @default(autoincrement())
  productName  String
  productPrice Int
  productStock Int
  cartItems    CartItem[]
  // orderItems   OrderItem[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@map(name: "products")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems CartItem[]

  @@map(name: "carts")
}

model CartItem {
  id               Int     @id @default(autoincrement())
  cartItemQuantity Int
  productId        Int
  product          Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId           Int
  cart             Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "cartItems")
}

model Order {
  id          String      @id @default(uuid())
  orderDate   DateTime
  orderAmount Int
  orderStatus OrderStatus @default(PENDING)
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems  OrderItem[]
  payments    Payment[]

  @@map(name: "orders")
}

model OrderItem {
  id                Int     @id @default(autoincrement())
  orderItemQuantity Int
  productId         Int
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId           String
  order             Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "orderItems")
}

model Payment {
  id            Int           @id @default(autoincrement())
  paymentDate   DateTime
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map(name: "payments")
}
