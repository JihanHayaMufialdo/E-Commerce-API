{
  "openapi": "3.0.0",
  "info": {
    "title": "E-commerce Mock API",
    "version": "1.0.0",
    "description": "\n        This is a mock version of the E-Commerce API.  \n        - No real database operations are performed.  \n        - No actual authentication or payment gateway is connected.  \n        - All endpoints return fake/mock responses for testing and documentation only.  \n      "
  },
  "servers": [
    {
      "url": "/public"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Role": {
        "type": "string",
        "enum": [
          "USER",
          "ADMIN"
        ]
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "PAID",
          "SHIPPED",
          "DELIVERED",
          "CANCELLED"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string"
          },
          "userEmail": {
            "type": "string",
            "format": "email"
          },
          "userPassword": {
            "type": "string",
            "description": "Hashed password"
          },
          "userRole": {
            "$ref": "#/components/schemas/Role"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "productName": {
            "type": "string"
          },
          "productPrice": {
            "type": "integer"
          },
          "productStock": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "cartItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          }
        }
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "cartItemQuantity": {
            "type": "integer"
          },
          "productId": {
            "type": "integer"
          },
          "cartId": {
            "type": "integer"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "orderAmount": {
            "type": "integer"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "orderItemQuantity": {
            "type": "integer"
          },
          "productId": {
            "type": "integer"
          },
          "orderId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "orderId": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    }
  },
  "paths": {
    "/register": {
      "post": {
        "summary": "User register",
        "description": "This endpoint simulates user registration.\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userName": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "userEmail": {
                    "type": "string",
                    "example": "john@example.com"
                  },
                  "userPassword": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered"
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "User login",
        "description": "This endpoint simulates user login. It returns a fake JWT token for testing.\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userEmail": {
                    "type": "string",
                    "example": "user@shop.com"
                  },
                  "userPassword": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/login": {
      "post": {
        "summary": "Admin login",
        "description": "This endpoint simulates admin login. It returns a fake JWT token for testing.\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userEmail": {
                    "type": "string",
                    "example": "admin@example.com"
                  },
                  "userPassword": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cart": {
      "get": {
        "summary": "Get user's cart",
        "description": "Retrieve the current user's cart with all cart items.",
        "tags": [
          "Carts"
        ],
        "responses": {
          "200": {
            "description": "Request success"
          },
          "500": {
            "description": "Error fetching cart"
          }
        }
      }
    },
    "/cart/items": {
      "post": {
        "summary": "Add item to cart",
        "description": "Add a product to the user's cart. If the product already exists in the cart, its quantity will be incremented.",
        "tags": [
          "Carts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "productId",
                  "cartItemQuantity"
                ],
                "properties": {
                  "productId": {
                    "type": "integer",
                    "example": 1
                  },
                  "cartItemQuantity": {
                    "type": "integer",
                    "example": 2
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item added to cart"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Error adding item to cart"
          }
        }
      }
    },
    "/cart/items/{id}": {
      "put": {
        "summary": "Update cart item quantity",
        "description": "Update the quantity of a specific item in the cart.",
        "tags": [
          "Carts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the cart item"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cartItemQuantity"
                ],
                "properties": {
                  "cartItemQuantity": {
                    "type": "integer",
                    "example": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart item updated"
          },
          "404": {
            "description": "Item not found"
          },
          "500": {
            "description": "Error updating cart item"
          }
        }
      },
      "delete": {
        "summary": "Delete cart item",
        "description": "Remove an item from the cart by its ID.",
        "tags": [
          "Carts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the cart item"
          }
        ],
        "responses": {
          "200": {
            "description": "Cart item deleted"
          },
          "404": {
            "description": "Item not found"
          },
          "500": {
            "description": "Error deleting cart item"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Get active orders",
        "description": "Retrieve all active orders of the logged-in user.\n",
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "List of active orders"
          },
          "500": {
            "description": "Error fetching orders"
          }
        }
      },
      "post": {
        "summary": "Create new order",
        "description": "Create an order from items in the user's cart or request body.   This endpoint will check stock availability, calculate total amount, and update product stock.  \n",
        "tags": [
          "Orders"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "orderItems"
                ],
                "properties": {
                  "orderItems": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "productId",
                        "orderItemQuantity"
                      ],
                      "properties": {
                        "productId": {
                          "type": "integer",
                          "example": 1
                        },
                        "orderItemQuantity": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created"
          },
          "400": {
            "description": "Not enough stock"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/orders/history": {
      "get": {
        "summary": "Get order history",
        "description": "Retrieve cancelled and delivered orders of the logged-in user.\n",
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "List of historical orders"
          },
          "500": {
            "description": "Error fetching order history"
          }
        }
      }
    },
    "/orders/{id}/status": {
      "put": {
        "summary": "Update order status",
        "description": "Update the order status to DELIVERED when the order is received.\n",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated"
          },
          "400": {
            "description": "Invalid value for orderStatus, Order cannot be cancelled"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/orders/{id}/cancel": {
      "delete": {
        "summary": "Cancel order",
        "description": "Cancel a specific order, only if it is still in PENDING status.  \n",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled"
          },
          "400": {
            "description": "Invalid value for orderStatus, Order cannot be cancelled"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin/orders": {
      "get": {
        "summary": "Get all orders",
        "description": "Retrieve all orders and orders history from all users.   \n",
        "tags": [
          "Admin-Orders"
        ],
        "responses": {
          "200": {
            "description": "List of all orders"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/users/{userId}/orders": {
      "get": {
        "summary": "Get orders of a user",
        "description": "Retrieve all orders of a specific user.  \n",
        "tags": [
          "Admin-Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Request success"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin/users/{userId}/orders/{orderId}": {
      "get": {
        "summary": "Get order items of a user",
        "description": "Retrieve all items of a specific order belonging to a user.\n",
        "tags": [
          "Admin-Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Request success"
          },
          "403": {
            "description": "Unauthorized, Order does not belong to user"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin/users/{userId}/orders/{orderId}/status": {
      "put": {
        "summary": "Update order status to SHIPPED",
        "description": "Update an order's status to SHIPPED,   but only if the order currently has status PAID.  \n",
        "tags": [
          "Admin-Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated"
          },
          "400": {
            "description": "Order not eligible for shipping (not PAID)"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/orders/{id}/payment": {
      "post": {
        "summary": "Create payment transaction",
        "description": "Returns a payment `token` and `redirect_url` for testing.\n",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment token created",
            "content": {
              "application/json": {
                "example": {
                  "message": "Payment token created",
                  "redirect_url": "https://app.sandbox.midtrans.com/snap/v2/vtweb/mock-payment-url",
                  "token": "mock-token-12345"
                }
              }
            }
          },
          "400": {
            "description": "Order must be pending"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "Retrieve all products",
        "description": "Fetches a list of all products available in the store.",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "Request success"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/products": {
      "get": {
        "summary": "Retrieve all products detail",
        "description": "Fetches a list of all products available.",
        "tags": [
          "Admin-Products"
        ],
        "responses": {
          "200": {
            "description": "Request success"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new product",
        "description": "Create a new product with name, price, and stock.",
        "tags": [
          "Admin-Products"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "productName",
                  "productPrice",
                  "productStock"
                ],
                "properties": {
                  "productName": {
                    "type": "string",
                    "example": "Apple iPhone 17"
                  },
                  "productPrice": {
                    "type": "integer",
                    "example": 23000000
                  },
                  "productStock": {
                    "type": "integer",
                    "example": 15
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created"
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/products/{id}": {
      "put": {
        "summary": "Update a product by ID",
        "description": "Update an existing product's name, price, or stock.",
        "tags": [
          "Admin-Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the product to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productName": {
                    "type": "string",
                    "example": "Apple iPhone 14 Pro"
                  },
                  "productPrice": {
                    "type": "integer",
                    "example": 13000000
                  },
                  "productStock": {
                    "type": "integer",
                    "example": 30
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated"
          },
          "400": {
            "description": "Invalid input or product not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a product by ID",
        "description": "Delete an existing product by providing its ID.",
        "tags": [
          "Admin-Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the product to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted"
          },
          "400": {
            "description": "Invalid product ID or product not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "summary": "Get users (mock)",
        "description": "Retrieve a mock list of users.\n",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Request success"
          }
        }
      }
    }
  },
  "tags": []
}
